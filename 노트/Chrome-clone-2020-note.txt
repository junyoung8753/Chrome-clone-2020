* JavaScript note *

#1 THEORY
@변수
  #1.6 Your first JS Variable(변수!)
    * JavaScript 기초지식
      -"use strict"; 을 사용하자.
      - 끝부분 ;을 사용한다
      - line을 expression 이라한다.
      - 윗라인에서 아랫라인순으로 읽어간다.
      - 숫자를 0부터 카운트 한다.
      - 소문자로 시작하여 space 대신 대문자를 사용한다.
          예) const daysOfWeek = "Mon"
      - 여러줄 주석처리
          단축키: shift + alt + A
    * 용어/단어
      - init : 초기화
      - dir : direction


    *변수의 기본작동법
      - Create
      - Initialize
      - Use
  #1.7 let, const, var#
    * let
      - 변수 var과의 차이는 아직 모름.
    * const
      - 변수를 주고싶을 때 사용하며 한번 준 변수를 변하지않게 하고싶을때 사용함.
      - 변수를 선언할때는 기본적으로 const 를 사용.(필요전까진 let사용X) 
        예) const a = 221; 를 준 후 나중에 까먹고 
        let a = 44; 혹은 const a = 44 등을 주면 에러값을 줘 알려준다.
    * var 
      -변수 let 과의 차이 아직 모름.
    * 콘솔창의 에러값 보는법
      - index.js:10:3 은 index.js파일의 10번째줄 3번째 글자란뜻.
@데이터타입
  #1.8 Data Types on JS
    * String(문자열, "", '', ``)
      - 끈 또는 줄 정도로 번역.
      - "준영" 이라고 하면 JS는 글자로 알아듣는다
      -  준영  이라고 하면 숫자 또는 키워드( what do 등등등)로 알아듣고 찾으려 한다.
        예1) const what = "hi";
            console.log(what);
            출력 >>> hi
        예2) const what = hi;
             console.log(what);
             출력 >>> error나옴.   
             ""를 사용하지않아 hi가 뭔지 모른다.
        예3) function sayHello(name,age){
              return `Hello ${name} you are ${age} years old`;
             }
    * Boolean
      - True or False 이다.
        예) const wat = false;
            const wat = true;
            const wat = "false" 라고 하지않는다. 글자가 아니기 때문. 
             true=1
             false=0
    * float 
      - 소숫점 숫자.
         예) 1.4 , 3.2등...
@데이터 정렬
  #1.9 Organizing Data with Arrays
    * array(배열, 정렬)
      -리스트같이 데이터를 저장하는것. 즉, 여러 string들을 하나로 묶는것(grouping).
      - ["A","B"] 즉 [] 으로 묶고 [숫자]로 순서를찾는다(예시2-1).    
        예1) const monday = "Mon";
             const tuesday = "Tue";
             const wednesday = "Wed";
             const thursday = "Thu";
             const friday = "Fri";
             console.log(monday, tuesday, wednesday, thursday, friday);
             출력>>> Mon Tue Wed Thu Fri
             가능하지만 비효율적이다.
        예2) const daysOfWeek = ["Mon", "Tue", "Wed", "Thu", "Fri"];
             console.log(daysOfWeek);
             출력>>> [ 'Mon', 'Tue', 'Wed', 'Thu', 'Fri' ]
        예2-1) const daysOfWeek = ["Mon", "Tue", "Wed", "Thu", "Fri"];
               console.log(daysOfWeek[2]);
               출력>>> Wed
  #1.10 Organizing Data with Objects
    * Objects(목적, 대상)
      - 실제하는 주체의 객관화
      - 각 value에 이름을 줄 수 있다.
      - { } 를사용하며 object란 그릇안의 data에 label을 준다.
      - (junyoungInfo.favFood[1].name)과 같이 . 에 찾으려는 object를 붙인다. 
      - array와object 차이점
        예) - array
            const junyoungInfo = ["Junyoung", "20", true, "Seoul"];
            - object
            const junyoungInfo = {name:"Junyoung", age:"20", gender:"Male", isHandsome:true};
  #array와 objects 활용
    * 다중 구조
      - 예) 구조: {object[array]}
            const junyoungInfo = {
              name: "Junyoung",
              age: 20,
              gender: "Male",
              isHandsome: true,
              favMovies: ["motherfucker", "suckMyDick", "sexSex"],
            };
            console.log(junyoungInfo.favMovies);
            출력>>> ["motherfucker", "suckMyDick", "sexSex"]
      - 예) 구조: {object[array{object}]}
            const junyoungInfo = {
              name: "Junyoung",
              age: 20,
              gender: "Male",
              isHandsome: true,
              favMovies: ["motherfucker", "suckMyDick", "sexSex"],
              favFood: [
                {name: "Kimchi", fatty:false}, 
                {name: "Cheese burger", fatty:true}
              ]
            };
            console.log(junyoungInfo.favFood);
            출력>>> [ { name: 'Kimchi', fatty: false },
                      { name: 'Cheese burger', fatty: true }
                    ]
            console.log(junyoungInfo.favFood[0]);
            출력>>>  { name:'Kimchi', fatty:false}

            console.log(junyoungInfo.favFood[0].name);
            출력>>>   Kimchi
#2 PRACTICE
@함수
  #2.0 Your first JS Function
    * function (함수)
      - console.log('hi');에서 'hi'는 argument(인자). 함수()안쪽을 가리키는 단어.
      - 기본작동
        function sayHello(){
          console.log('hello');
        };
        sayHello() 
        출력>>> hello
      - 기본작동2
        function sayHello(a,b,c,d){
          console.log('hi',a,b,"Im",d,c);
        };
        sayHello('nice meet',"too","age",15);
        출력>>> hi nicemeet too Im 15 age
  #2.1 More Function Fun (10:24)
    * console.log
      - console.log는 그냥 출력하는 기능을한다.
        > console(콘솔장치)안의 log를 작동시켜라. 즉 log를 출력해라.
      - console은 built-in (내장)함수이며 그 안에 log 가 들어있다.
      - console.dir 은 direction을 보여주는 기능을한다.
      - 과제: 사칙연산
         const calculator = {
          plus: function(a, b){return a + b},
          minus: function(a, b){return a - b},
          multiple: function(a, b){return a * b},
          divide: function(a, b){return a / b},
          powerOf: function(a, b){return a ** b}
          } ;

          const duhagi = calculator.plus(1,2);
          const ffegi = calculator.minus(2,3);
          const gopagi = calculator.multiple(4,3);
          const nanugi = calculator.divide(8,2);
          const seungsu = calculator.powerOf(2,3);

          console.log(duhagi);
          console.log(ffegi);
          console.log(gopagi);
          console.log(nanugi);
          console.log(seungsu);
    * return
      - 반환하는 값. 가지고 있다가 호출시 사용한다.
@DOM
  #2.2 JS DOM Functions (DOM 함수들)
    * DOM (Document Object Module)
      -'문서 객체화 모듈'
        ****DOM****
        DOM은 document안에있는 element를 DOM제어속성(getElementById,getElementsByClassName등)
        을 이용하여 문서를 객체화 시켜준다.
          예)document.getElementById('title');는 DOM이다.
             document안에 있는 모든것을 DOM제어속성을 이용해 객체로 만들수있다.
      - getElementById도 document의 native(내장)함수이며 document.getElementById 처럼 console.error의
            error도 console의 내장함수이고 동일한 구조이다. 하지만 DOM제어속성은 아니다.
            console.error의 error는 이미 console의 내장되어있는 함수object 이다.
      - DOM 제어요소.
          > document.querySelector("#title") 첫번째 node를 반환하며 . # 으로 id, class를 찾는다.
          > document.getElementById("title") id 이름으로 찾는다. getElementBy~~~ 다 동일.
          > document.getElementsByClassName
          > document.getElementsByTagName
  #2.3 Modifying the DOM with JS (JS로 DOM 수정하기)
    * 예제 연습 (copy paste)
      - DOM modifying(DOM 수정하기)
        1) innerHTML로 화면에 "Hi! From JS" 출력하기. 
          //document 안의 getElementByI(DOM제어요소)로 HTML의 element이며 ID인 #tltle을 호출.
            document.getElementById('title');

          //getElementById('')의 Object인 innerHTML을 이용해 "hi from js" 로 만들어라.
            document.getElementById('title').innerHTML = 'Hi! From JS';

          // Modifying 하기위해 HTML의 #title의 이름을 title 이라고 선언
            const title = document.getElementById('title');

          // **title.innerHTML 으로 DOM modifying 했다 
            title.innerHTML = 'Hi! From JS';
        2) #title의 색을 red로 해라.
          //
            const title = document.getElementById('title') 
            document.getElementById('title').style.color = 'red';
            title.style.color = 'red';
        3) 화면창 title(크롬창탭title)을 "JS own title"로 바꿔라.
          // **중요** document의 Object인 title을 사용해 title을 JS own title 로 주었다.
          // 그러므로 title 은 const title = document.getElementById('title')이 아니다.
            document.title = 'JS own title';
          //document.document.getElementById('title') = 'JS own title'; 이 아니다!!
@이벤트와 이벤트 핸들러
  #2.4 Events and event handlers
    * Event 와 event handler 설명
      - DOM인 addEventListener 등을 넣어 이벤트 발생시 어떠한 function등이 일어나게 만드는것.
      - window.addEventListener("resize",handleResize);등으로 작성한다.
    * 예제연습 (copy paste)
      1)창이 resize 되면 콘솔에 "I have been resized"를 출력해라.
        //handleResize의 function을 주었다.
          function handleResize() {console.log('I have been resized');}
        //window의 DOM인 addEventListener를 사용. resize(event)되면 handleResize(event handler)를 작동시켜라.
          window.addEventListener("resize",handleResize);
        //handleResize() 를 넣으면 "당장 실행시켜라"이다.(우리는 필요할때 실행시킬거니까 ()를 쓰지말자!)
          window.addEventListener("resize",handleResize());
      2) #fuck을 클릭하면 backgroundColor을 red 로 만들어라.
        //fuck 을 선언
          const fuck = document.querySelector("#fuck")
        //handleClick을 선언 
          function handleClick() {fuck.style.backgroundColor = 'red';}
        //fuck에 (DOM)eventlistner를 넣고 click 했을 때 handleclick을 불러라.
          fuck.addEventListener("click",handleClick);
        //handleClick을 불러보니 fuck.style.backgroundColor = 'red'를 function 하는거네~
@조건문
  #2.5 If, else, and, or (조건)
    * 기본지식
      - condition을 주고 block으로 무엇을 할지 넣는다.
      - condition: 조건. true or false 인 값을 넣는다.
      - block: JavaScript표현법. console.log, alert, 아무거나 와도됨.
    * 표기 기호
      - === : equal/같다.
              무언가를 할당하지 않고 true or false 만 체크한다.
              const haha = "lalala"  --> haha는 변수값 'lalala'를 갖는다.
              10 === 5 는 무언가를 할당하지 않는다. 그냥 체크만 한다.
      - !== : not equal같지 않다.
      - &&  : and.
                > true && true = true;
                  true && false = false;
                  false && ture = false;
                  false && false = false;
      - ||  : or
                > true || true = true;
                  true || false = true;
                  false || ture = true;
                  false || false = false;
      - !anything : !뒤 단어를 붙이면 반대를 말한다.
          즉, anti of something.
          const hasClass = title.classList.contains(CLICKED_CLASS);
          if(!hasClass){console.log}
          이라면 hasClass 가 아니라면 이란뜻.
      - ?  : 삼항연산자/mini If.
            seconds < 10 ? `0${seconds}` : seconds

      - `` : "" 대신 사용하는것. string이라보면됨. (더 편해서 사용)
                ex) 시간:분:초 (초가 10보다 작으면 0을붙여라.)
                //`${시} : ${분} : ${초 < 10 인가(?는if) `0${초}` 해라 아니면(:는else) seconds 해라}`
                clockTitle.innerText = `${hours}:${minutes}:${
                  seconds < 10 ? `0${seconds}` : seconds}`;
      
    * Form 형태
      - 기본 Form 구조
          if(condition){
            block
          } else {
            block
          }
      - 기본형태 적용 예시
          if (10 > 5) {
            console.log('hi');
          } else {
            console.log('ho');
          }
    * 예제연습 (copy paste)
      1) if age<18이면 fuckoff, 18~22 면 welcome litte, 22 <age 면 welcome 을 출력해라.
        const age = prompt('how old are you');
        if (age >= 18 && age <= 22) {
          console.log('welcome little');
        } else if (age > 22) {
          console.log('welcome');
        } else {
          console.log('fuckoff');
        }
@연습
  #2.6 DOM - If else - Function practice
    * 예제 연습. (copy paste)
      1) title을 클릭하면 글씨 색깔 바뀌게 해라.
        const title = document.querySelector('#title');

        const BASE_COLOR = 'blue';
        const OTHER_COLOR = '#7f8c8d';

        function handleClick() {
          const currentColor = title.style.color;
          if (currentColor === BASE_COLOR){
            title.style.color = OTHER_COLOR
          } else {
            title.style.color = BASE_COLOR;
          }
        }

        function init() {
          title.style.color = BASE_COLOR;
          title.addEventListener('click', handleClick);
        }

        init();
      2)on/offline이란 event로 네트워크 상태메시지 콘솔에 출력하기.
          function handleOffline() {
            console.log('The network connection has been lost.');
          }
          function handleOnline() {
            console.log('The network connection has been found.');
          }
        //window안의 addEventListener의 event인 on offline 이벤트 사용
          window.addEventListener('offline', handleOffline);
          window.addEventListener('online', handleOnline);
  #2.7 DOM - If else - Function practice Two
    * 예제: 페이지의 'This Works!'를 클릭하면 색깔과 커서가 바뀌게하라. 
      - 1단계: 색깔은 변하고 돌아오지만 커서 pointer를 설정안한 상태.
              // #title을 클릭하면 handleClick을 작동해라
              //currentClass 즉, #title의 className 이 'clicked' 와 같지않으면 
              //#title의 className = 'clicked' 하고 else는 'amugut'으로해라.
              const title = document.querySelector('#title');
              const CLICKED_CLASS = 'clicked';

              function handleClick() {
                const currentClass = title.className;
                if (currentClass !== CLICKED_CLASS) {
                  title.className = CLICKED_CLASS;
                } else {
                  title.className = 'amugut';
                }
              }

              function init() {
                title.addEventListener('click', handleClick);
              }

              init();

      - 2단계: className 확인으로 작동
              (1단계 방식에서 .clicked에도 cursor:pointer를 주어서 작동)
              // html에 <h1 id="title">에 class= "btn" 을 주고 css에 .btn{cursor:pointer;}를준다.
              // 그러면 처음에만 커서가 작동한다. 왜냐면 처음 class는 btn인데 클릭해서 'clicked' 된후
              // 다시 클릭하면 'amugut' 으로 바뀌기 때문.
              // else를 btn으로 해서 classname을 돌려주고 CSS의 .clicked에도 .btn{cursor:pointer;}를 주면 해결가능.
              const title = document.querySelector('#title');
              const CLICKED_CLASS = 'clicked';

              function handleClick() {
                const currentClass = title.className;
                if (currentClass !== CLICKED_CLASS) {
                  title.className = CLICKED_CLASS;
                } else {
                  title.className = 'btn';
                }
              }

              function init() {
                title.addEventListener('click', handleClick);
              }

              init();


      - 3단계: classList에 className이 있는지 확인으로 작동(처음에 한번만 작동)
              //classList로는 class가 .clicked와 .btn 두개가있기에 currentClass는 .btn.clicked 라서
              //계속 거짓이되 else만 작동한다.

              const title = document.querySelector('#title');
              const CLICKED_CLASS = 'clicked';

              function handleClick() {
                const currentClass = title.className;
                if (currentClass === CLICKED_CLASS) {
                  title.classList.remove(CLICKED_CLASS)
                } else {
                  title.classList.add(CLICKED_CLASS)
                }
              }

              function init() {
                title.addEventListener('click', handleClick);
              }

              init();
      - 4단계: classList에 CLICKED_CLASS가 포함되어 있는지 확인으로 작동.
              // init호출.
              // init 해라.
              // #title이 click되면 handleClick이 작동해라.
              // #title을 title로 Modifying.
              // CLICKED_CLASS 를 'clicked'라 한다.
              // querySelector('#ID이름')의 Object인 classList와 그의 (Object)contains를 사용하여 'clicked'를 준 값을 hasClass라 한다..
              // 즉, #title은 classList에 contain한다 'clicked'를.
              // 만약 hasClass가 거짓이라면. 즉, CLICKED_CLASS가 classList에 포함안되있으면.
              // title의 classList에 add해라 'clicked'를
              // 그외는 제거해라 classlist에서 'clicked'를. 즉, !hasClass가 아닌 hasClass("clicked"상태)이면 제거해라.
              const title = document.querySelector('#title');
              const CLICKED_CLASS = 'clicked';
              function handleClick() {
                const hasClass = title.classList.contains(CLICKED_CLASS);
                if (!hasClass) {
                  title.classList.add(CLICKED_CLASS);
                } else {
                  title.classList.remove(CLICKED_CLASS);
                }
              }
              function init() {
                title.addEventListener('click', handleClick);
              }
              init();

      - 5단계: 토글로 더 간단히 만들기

              const title = document.querySelector('#title');
              const CLICKED_CLASS = 'clicked';

              function handleClick() {
              title.classList.toggle(CLICKED_CLASS);
              }

              function init() {
                title.addEventListener('click', handleClick);
              }

              init();

      - 비교: 만든 4단계토글과 내장토글 비교 (원리 이해용)
              function handleClick() {
                title.classList.toggle(CLICKED_CLASS);
                }

              function handleClick() {
                const hasClass = title.classList.contains(CLICKED_CLASS);
                if (hasClass) {
                  title.classList.remove(CLICKED_CLASS);
                } else {
                  title.classList.add(CLICKED_CLASS);
                }
              }
  #3.0 Making a JS Clock part One
  #3.1 Making a JS Clock part Two
    * 시계 완성 JS 코드
      /*----------------------------------------------------------
      const clockContainer = document.querySelector('.js-clock'),
      clockTitle = clockContainer.querySelector('h1');

      function getTime() {
        const date = new Date();
        const minutes = date.getMinutes();
        const hours = date.getHours();
        const seconds = date.getSeconds();
        clockTitle.innerText = `${hours < 10 ? `0${hours}` : hours}:${
          minutes < 10 ? `0${minutes}` : minutes
        }:${seconds < 10 ? `0${seconds}` : seconds}`;
      }

      function init() {
        getTime();
        setInterval(getTime, 1000);
      }

      init();
      ----------------------------------------------------------*/
